<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="sy.nth" module="sy">

	<digest>
		Return characters by indices
	</digest>

	<description>
		Returns one or more specific characters, based on their indices.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Daniele Ghisi</metadata>
		<metadata name="tag">sy</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				List of characters at indices
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="indices" optional="1" type="list">
			<digest>
				Indices
			</digest>
			<description>
				The list of indices at which characters should be retrived.
				In the sy library, indices are always 1-based (i.e. 1 is first character, 2 is second character, and so on).
				Negative numbers count backwards, starting from the end of the symbol (-1 is last character, -2 is one-but-last, and so on). <br />
				A range syntax is also available: to define ranges of indices, wrap them inside a level of parenthesis (leaving a space
				before and after each parenthesis). For instance, <b>1 2 ( 4 8 )</b> refers to the first and second element, and then to
				elements from 4th to 8th.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="anything">
			<arglist />
			<digest>
				Return characters
			</digest>
			<description>
				Anything in the left inlet will trigger the output of a list containing the characters picked from the introduced elements,
				(one character corresponding to each introduced index, see <m>list</m> method, except for the range syntax).
				By default characters are joined in symbols; see <m>separate</m> attribute to output separate characters.
				In the sy library, indices are always 1-based (i.e. 1 is first character, 2 is second character, and so on).
				Negative numbers count backwards, starting from the end of the symbol (-1 is last character, -2 is one-but-last, and so on). <br />
				A range syntax is also available: to define ranges of indices, wrap them inside a level of parenthesis (leaving a space
				before and after each parenthesis). For instance, <b>1 2 ( 4 8 )</b> refers to the first and second element, and then to
				elements from 4th to 8th.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Perform last operation
			</digest>
			<description>
				Returns the characters from the most recently received input symbol.
			</description>
		</method>
		<method name="list">
			<arglist />
			<digest>
				Set indices
			</digest>
			<description>
				A list in the right inlet is the list of indices to be picked.
				In the sy library, indices are always 1-based (i.e. 1 is first character, 2 is second character, and so on).
				Negative numbers count backwards, starting from the end of the symbol (-1 is last character, -2 is one-but-last, and so on). <br />
				A range syntax is also available: to define ranges of indices, wrap them inside a level of parenthesis (leaving a space
				before and after each parenthesis). For instance, <b>1 2 ( 4 8 )</b> refers to the first and second element, and then to
				elements from 4th to 8th.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="listin" get="1" set="1" type="int" size="1">
			<digest>
				When Lists Are Input
			</digest>
			<description>
				Sets the way in which lists should be handled when received:
				- Process Globally (default): lists are treated as a single symbol (each couple of atoms is interpreted as being joined via a whitespace character); <br />
				- Process Element-Wise: each atom is processed separately. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="When Lists Are Input" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="listout" get="1" set="1" type="int" size="1">
			<digest>
				Output Elements
			</digest>
			<description>
				Sets the way in which elements should be arranged in lists at output.
				- Always As Single Symbol: atoms are never separated into lists, and a single symbol is always output; <br />
				- Adapt To Input (default): lists are output only if in accordance with the fact that lists had been input; <br />
				- Always Separate: lists are split into atoms whenever possible. This is roughly equivalent as having a <o>fromsymbol</o> object connected to sy object's outlet <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Elements" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="numout" get="1" set="1" type="int" size="1">
			<digest>
				Output Numbers
			</digest>
			<description>
				Sets the way in which numbers should be handled when output:
				- Only With Numeric Original: keep as numbers only the incoming numbers (beware: if you choose "Convert To Symbol"
				as <m>numin</m> attribute, the numbers will be converted to symbols, and thus will be output as such, in this case); <br />
				- Convert From Numeric Symbols (default): symbol which completely represent a number are converted into the number; <br />
				- Convert From All Symbols: all symbols are converted into numbers. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Numbers" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="separate" get="1" set="1" type="int" size="1">
			<digest>
				Separate Output Characters
			</digest>
			<description>
				Toggles the ability to separate the output characters as different atoms. Defaults to 0 (Don't).
				"Keep Ranges" (1) will separate characters, but keep the range syntax (see <m>anything</m> method).
				"Separate All" (2) will separate all characters, including the ones in range syntax
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Separate Output Characters" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		Of course, the function returns whole UTF-8 codepoints, not code units.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="sy.filterempty" />
		<seealso name="sy.slice" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (list)">
			<description>
				List of characters at indices.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		Of course, the function returns whole UTF-8 codepoints, not code units.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
index, return, character, codepoint, address, position.
			</description>
		</entry>
	</misc>

</c74object>