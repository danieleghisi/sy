<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="sy.pad" module="sy">

	<digest>
		Pad symbols
	</digest>

	<description>
		Appends or prepends characters to input symbols to match a given length.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Daniele Ghisi</metadata>
		<metadata name="tag">sy</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Incoming symbol or list
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				The output length
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				The padding characters
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Symbols with padded characters
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="output_length" optional="0" type="int">
			<digest>
				Output length
			</digest>
			<description>
				The first integer argument sets the output length, i.e. the target length that
				the output symbols must have.
			</description>
		</objarg>
		<objarg name="padding_characters" optional="1" type="symbol">
			<digest>
				Padding character or characters
			</digest>
			<description>
				The second argument sets the character used for padding (or characters, in "Loop" <m>mode</m>).
				This can be a symbol containing a single character, such as <b>"0"</b> or <b>_</b>,
				or - in "Loop" <m>mode</m> - any symbol containing more than one character, from which the padding elements should be picked.
				Setting this argument as the empty symbol <b>""</b> (also see <o>sy.empty</o>),
				forces <o>sy.pad</o> to repeat the
				elements of the incoming list (default).
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="anything">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				In first inlet: the incoming symbol or list is padded or trimmed (accorded to the attribute values), and the result is output from the outlet.<br />
				In third inlet: sets the padding character (or elements, for "Loop" <m>mode</m>).
				This can be a one-character-symbol, such as <b>x</b> or <b>" "</b>, or - in "Loop" <m>mode</m> - any complex symbol,
				interpreted as a reservoir from which the padding elements should be picked.
				Setting the empty symbol forces <o>bach.pad</o> to repeat the elements of the incoming one (default)
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Perform padding
			</digest>
			<description>
				Performs the operation of the most recently received input data.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Sets output length
			</digest>
			<description>
				A non-negative integer in the second inlet sets the desired output length for padding or trimming.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="align" get="1" set="1" type="int" size="1">
			<digest>
				Alignment
			</digest>
			<description>
				Sets the alignment of the original llll within the padded llll. <br />
				- If alignment is 0 = <b>Left</b> (default), the padding will be done at right. <br />
				- If alignment is 1 = <b>Center</b> the padding will be equally done at left and at right
				(rounding to the right). <br />
				- If alignment is 2 = <b>Right</b>, the padding will be done at left.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Alignment" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="listin" get="1" set="1" type="int" size="1">
			<digest>
				When Lists Are Input
			</digest>
			<description>
				Sets the way in which lists should be handled when received:
				- Process Globally (default): lists are treated as a single symbol (each couple of atoms is interpreted as being joined via a whitespace character); <br />
				- Process Element-Wise: each atom is processed separately. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="When Lists Are Input" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="listout" get="1" set="1" type="int" size="1">
			<digest>
				Output Elements
			</digest>
			<description>
				Sets the way in which elements should be arranged in lists at output.
				- Always As Single Symbol: atoms are never separated into lists, and a single symbol is always output; <br />
				- Adapt To Input (default): lists are output only if in accordance with the fact that lists had been input; <br />
				- Always Separate: lists are split into atoms whenever possible. This is roughly equivalent as having a <o>fromsymbol</o> object connected to sy object's outlet <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Elements" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="loopsize" get="1" set="1" type="int" size="1">
			<digest>
				Number of Elements to Repeat
			</digest>
			<description>
				Sets the number of elements to be repeated in "Loop" <m>mode</m> (has no effect in "Repeat" <m>mode</m>)
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Elements to Repeat" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxdecimals" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Decimal Digits For Number Conversion
			</digest>
			<description>
				Sets the maximum number of decimals to be used for the conversion from number
				to symbol, in case the <m>numbers</m> attribute is set to "Convert To Symbol".
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Decimal Digits For Number Conversion" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="mode" get="1" set="1" type="int" size="1">
			<digest>
				Padding Mode
			</digest>
			<description>
				Sets the padding mode: <br />
				- <b>Repeat</b> (default) just copies a single element (the first or last element, depending on the <m>align</m> attribute) over and over,
				until the desired length has been reached (e.g.: ABCDDDDDD...); <br />
				- <b>Loop</b> copies the whole llll (or a portion of it, depending on the <m>loopsize</m> attribute) over and over, until the desired length
				has been reached. Last copy can of course be trimmed, if it overflows the desired length (e.g.: ABCDABCDABCDABCD...); <br />
				- <b>Palindrome Loop</b> is like the previous one, but reverses the loop direction at each new loop (e.g.: ABCDDCBAABCDDCBA...); <br />
				- <b>Palindrome Loop No Repetitions</b> is like the previous one, but avoids repetitions at the loop beginning or end (e.g.: ABCDCBABCDCBA...).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Padding Mode" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="numin" get="1" set="1" type="int" size="1">
			<digest>
				When Numbers Are Received
			</digest>
			<description>
				Sets the way in which numbers should be handled when received:
				- Let Through: numbers should be simply copied to the output; <br />
				- Convert To Symbol (default): numbers should be converted to symbols and handled as such; <br />
				- Drop: drop numbers from the outlet. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="When Numbers Are Received" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="numout" get="1" set="1" type="int" size="1">
			<digest>
				Output Numbers
			</digest>
			<description>
				Sets the way in which numbers should be handled when output:
				- Only With Numeric Original: keep as numbers only the incoming numbers (beware: if you choose "Convert To Symbol"
				as <m>numin</m> attribute, the numbers will be converted to symbols, and thus will be output as such, in this case); <br />
				- Convert From Numeric Symbols (default): symbol which completely represent a number are converted into the number; <br />
				- Convert From All Symbols: all symbols are converted into numbers. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Numbers" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="roundalign" get="1" set="1" type="int" size="1">
			<digest>
				Rounding Alignment Direction
			</digest>
			<description>
				Sets the rounding direction for the specific situation where the <m>align</m> attribute is set to "Center" and
				an odd number of elements should be split into right and left padding. <br />
				- If <m>roundalign</m> is 0 = <b>Left</b> (default), one more element is given at the right padding side; <br />
				- If <m>roundalign</m> is 1 = <b>Right</b>, one more element is given at the left padding side. <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Rounding Alignment Direction" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="trim" get="1" set="1" type="int" size="1">
			<digest>
				Trim If Needed
			</digest>
			<description>
				If the <m>trim</m> attribute is set to 1 (default),
				when the output length is less than the length of the original llll, this latter
				is trimmed at output; otherwise it is output as it is.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Trim If Needed" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		Length is defined as the number of codepoints in the Unicode string.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="sy.append" />
		<seealso name="combine" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (anything)">
			<description>
				Incoming symbol or list.
			</description>
		</entry>
		<entry name ="Inlet 2 (int)">
			<description>
				The output length.
			</description>
		</entry>
		<entry name ="Inlet 3 (anything)">
			<description>
				The padding characters.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (anything)">
			<description>
				Symbols with padded characters.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		Length is defined as the number of codepoints in the Unicode string.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
pad, join.
			</description>
		</entry>
	</misc>

</c74object>