<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="sy.route" module="sy">

	<digest>
		Route symbols according to starting or ending characters
	</digest>

	<description>
		Routes the incoming symbols according to their starting or ending characters.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Daniele Ghisi</metadata>
		<metadata name="tag">sy</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Outputs if input starts with corresponding router
			</digest>
			<description>
				Input is output from each one of these outlets if its starting characters match the corresponding router
				If <m>keep</m> is set to 1, input is output untouched, otherwise the routing characters are stripped, and the remaining
				part is output as a single symbol
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Input if Input doesn't match
			</digest>
			<description>
				Outputs the input data when no router has been matched.
			</description>
		</inlet>
	</inletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="routers" optional="0" type="list">
			<digest>
				Routing symbols
			</digest>
			<description>
				Sets the routing symbols, i.e. the symbol whose characters have to be matched
				at the beginning of the incoming symbols (or at the end, depending on the <m>end</m> attribute
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="anything">
			<arglist />
			<digest>
				Route input
			</digest>
			<description>
				If input comes from the first outlet, <o>sy.route</o> checks if the first characters of incoming input match the ones defined as arguments
				(or modified via the inlets from 2nd to last one).
				If so, it outputs the input from the corresponding outlet (1st argument corresponds to 1st outlet and 2nd inlet; 2nd argument corresponds to 2nd outlet and 3rd inlet, and so on).
				If no match is found, the input is simply re-output from the rightmost outlet. <br />
				If input comes from any other inlet, see <m>symbol</m>.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Perform last operation
			</digest>
			<description>
				Routes the most recently received input data
			</description>
		</method>
		<method name="symbol">
			<arglist />
			<digest>
				Set router
			</digest>
			<description>
				A symbol in the N-th inlet, with N bigger than 1, sets the routing characters for the (N-1)-th router, corresponding to the (N-1)-th outlet.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="end" get="1" set="1" type="int" size="1">
			<digest>
				Match Symbols End
			</digest>
			<description>
				Toggles the ability to route according to the end of the symbols, and not to their beginning.
				This is useful in many circumstances, e.g. to route filenames according to their extension.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Match Symbols End" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="keep" get="1" set="1" type="int" size="1">
			<digest>
				Keep Routers
			</digest>
			<description>
				Toggles the ability to keep the routing symbols at output. By default it is off.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Keep Routers" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="listin" get="1" set="1" type="int" size="1">
			<digest>
				When Lists Are Input
			</digest>
			<description>
				Sets the way in which lists should be handled when received:
				- Process Globally (default): lists are treated as a single symbol (each couple of atoms is interpreted as being joined via a whitespace character); <br />
				- Process Element-Wise: each atom is processed separately. <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="When Lists Are Input" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="multiple" get="1" set="1" type="int" size="1">
			<digest>
				Allow Multiple Matches
			</digest>
			<description>
				Toggles the ability to allow finding multiple matches. By default it is on.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Allow Multiple Matches" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="route" />
		<seealso name="routepass" />
		<seealso name="sy.find" />
		<seealso name="sy.compare" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlets 1, 2, 3... (anything)">
			<description>
				Outputs if input starts with corresponding router.
				Input is output from each one of these outlets if its starting characters match the corresponding router
				If <m>keep</m> is set to 1, input is output untouched, otherwise the routing characters are stripped, and the remaining
				part is output as a single symbol
			</description>
		</entry>
		<entry name ="Inlets 2, 3, 4... (anything)">
			<description>
				Input if Input doesn't match.
				Outputs the input data when no router has been matched.
			</description>
		</entry>
	</misc>

</c74object>